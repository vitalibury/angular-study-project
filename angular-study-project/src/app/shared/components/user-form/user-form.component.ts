import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, DoCheck, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { AbstractControl, AsyncValidatorFn, FormArray, FormControl, FormGroup, ValidationErrors, Validators } from '@angular/forms';
import { delay, EMPTY, first, map, mapTo, merge, mergeMap, Observable, Subscription, tap } from 'rxjs';
import { IUser, UsersService } from '../../../user';


@Component({
  selector: 'app-user-form',
  templateUrl: './user-form.component.html',
  styleUrls: ['./user-form.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class UserFormComponent implements OnInit, OnDestroy, OnChanges {

  subscription: Subscription = new Subscription();

  @Input() user: IUser;

  generatedEmail$: Observable<string>;

  nameValues = {
    firstName: '',
    lastName: '',
  };

  form: FormGroup;
  exception: string;
  isLoading = false;

  constructor(
    private usersService: UsersService,
    private ref: ChangeDetectorRef
    ) { }

  ngOnInit(): void {
    this.form = new FormGroup({
      firstName: new FormControl(null, Validators.required),
      lastName: new FormControl(null, Validators.required),
      age: new FormControl(null, [Validators.required, Validators.min(15), Validators.max(100)]),
      email: new FormControl(
        null,
        [Validators.required, , Validators.email, Validators.pattern(/@gmail.com\b/)],
        [this.existEmailAsyncValidator()]
      ),
      company: new FormControl(null, Validators.maxLength(35)),
      department: new FormControl(null, Validators.minLength(6)),
      // photo: new FormControl(null),
      gender: new FormControl(null, Validators.required)
    });

  }

  ngOnChanges(changes: SimpleChanges): void {
    // if (this.user === null) {        // перестает отрабатывать patchValue для адресов
    //   this.isLoading = true;
    // } else {
    //   this.isLoading = false;
    // }
    if (changes && changes['user'].currentValue) {
      
      const user = changes['user'].currentValue;
      this.form.patchValue(user);
      this.nameValues.firstName = user.firstName,
      this.nameValues.lastName = user.lastName

      merge(
        this.form.get('firstName').valueChanges.pipe(
          map(value => ({firstName: value}))
        ),
        this.form.get('lastName').valueChanges.pipe(
          map(value => ({lastName: value}))
        )
      )
        .subscribe(name => {
          Object.assign(this.nameValues, name);
          this.setAutoGeneratedEmail();
        })

        this.form.statusChanges.pipe(first()).subscribe(() => this.form.markAllAsTouched());
    }

  }

  ngOnDestroy(): void {
    this.subscription.unsubscribe();
  }


  checkFormValid(controlName: String): Boolean {
    const control = this.form.controls[`${controlName}`];
    const hasError = control.invalid && (control.dirty || control.touched);
    return hasError;
  }

  existEmailAsyncValidator(): AsyncValidatorFn {
    return (control: AbstractControl): Observable<ValidationErrors> => {
      return this.usersService.isEmailExist(control.value).pipe(map(
        existence => (existence && this.exception === control.value) ? { emailExist: true } : null
      ), delay(1000));
    }
  }

  addControl(addressesArrayForm: FormArray) {
    this.form.addControl('addresses', addressesArrayForm);
  }

  
  setAutoGeneratedEmail(): Observable<never> {
    let generatedEmail = this.generateEmail();
    let unique = this.checkEmailUnique(generatedEmail);
    let index = 1;
    while (!unique) {
      generatedEmail = this.generateEmail(index);
      unique = this.checkEmailUnique(generatedEmail);
      index++;
    }
    this.form.get('email').setValue(generatedEmail);
    return EMPTY;
  }

  checkEmailUnique(email: string): Boolean {
    let unique: Boolean;
    this.usersService.isEmailExist(email).pipe(
      first()
    ).subscribe(existence => unique = !existence);
    return unique;
  }

  generateEmail(i?: number) {
    if (i) {
      return `${this.nameValues.firstName}${i}-${this.nameValues.lastName}${i}@gmail.com`;
    }    
    return `${this.nameValues.firstName}-${this.nameValues.lastName}@gmail.com`;
  }

}
